# -*- coding: utf-8 -*-
"""
Created on Sat Nov 11 18:16:24 2017

@author: CarlosABG
"""

##################


import random
import numpy as np
from scipy import stats

aleatorio = lambda media, desvio_padrao, n_obs: np.random.normal(media, desvio_padrao, n_obs)

def erro_padrao(amostra):
    amostra = amostra[~np.isnan(amostra)]

    numerador = np.std(amostra)
    denominador = np.sqrt(len(amostra))
    
    return numerador / denominador

media = 0
desvio_padrao = 10

for i in [10, 100, 1000, 10000]:
    ep = erro_padrao(aleatorio(media, desvio_padrao, n_obs=i))
    print("n_obs: {}; erro padrão: {:.2f}".format(i, ep))    

def t_stat_media(amostra, valor_corte):
    
    # Calcular estatística-t
    media = np.mean(amostra)
    numerador = (media - valor_corte)
    denominador = erro_padrao(amostra)  
    t_stat = numerador / denominador
    
    # Calcular p-value
    p_value = stats.t.pdf(t_stat, df=df)
    
    return 

x = aleatorio(0, 10, 1000)

print(t_stat_media(x, 0))


    

##################

            

import pandas as pd

dfiq = pd.read_excel('https://github.com/omercadopopular/cgoes/blob/master/StatsPython/data/brain_size.xlsx?raw=true')

print(dfiq)

dfiq = pd.read_excel('https://github.com/omercadopopular/cgoes/blob/master/StatsPython/data/brain_size.xlsx?raw=true',
                     na_values=".")


dfiq.columns = ['sexo', 'FSIQ', 'VIQ', 'PIQ', 'peso', 'altura', 'MRI_Count']

lb_para_kg = lambda x: x / 2.2
in_para_cm = lambda x: x * 2.54

dfiq['peso'] = [lb_para_kg(pes) for pes in dfiq['peso']]
dfiq['altura'] = [in_para_cm(alt) for alt in dfiq['altura']]
dfiq['sexo'] = [string.replace("Female", "Feminino").replace("Male", "Masculino") for string in dfiq['sexo']]

grupos = dfiq.groupby('sexo')

print(grupos.mean(), grupos.median())

print(grupos.describe().T)

grupos.boxplot(column=['peso'])

# Versão simplificada do código fonte do scipy

def ttest_ind(a, b, equal_var=True):
    a = a[~np.isnan(a)]
    b = b[~np.isnan(b)]

    v1 = np.var(a)
    v2 = np.var(b)
    n1 = a.shape[0]
    n2 = b.shape[0]

    if (equal_var):
        df = n1 + n2 - 2
        svar = ((n1 - 1) * v1 + (n2 - 1) * v2) / float(df)
        denom = np.sqrt(svar * (1.0 / n1 + 1.0 / n2))
    else:
        vn1 = v1 / n1
        vn2 = v2 / n2
        df = ((vn1 + vn2)**2) / ((vn1**2) / (n1 - 1) + (vn2**2) / (n2 - 1))
        denom = np.sqrt(vn1 + vn2)

    diff = np.mean(a) - np.mean(b)
    t_stat = np.divide(diff, denom)
    p_value = stats.t.pdf(t_stat, df=df)

    return diff, t_stat, p_value

diff, t_stat, p_value = ttest_ind(dfiq[ dfiq['sexo'] == 'Masculino']['peso'], dfiq[ dfiq['sexo'] == 'Feminino']['peso'])

print("Diferença: {:.2f}".format(diff))
print("Estatística-t: {:.2f}".format(t_stat))
print("p-value: {:.2f}".format(p_value))
